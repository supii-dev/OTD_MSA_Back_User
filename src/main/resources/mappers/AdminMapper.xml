<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.otd.otd_admin.application.admin.AdminMapper">
    <select id="findAll">
        SELECT u.user_id,
            u.created_at,
            u.birth_date,
            u.email, u.gender,
            u.`name`,
            u.nick_name,
            u.phone, u.pic,
            u.`point`,
            u.provider_type,
            u.uid,
            u.xp,
            ur.challenge_code AS challengeRole,
            ur.role_code AS userRole
        FROM user u
        JOIN user_role ur
        ON u.user_id = ur.user_id
    </select>

    <select id="findByCdId">
        SELECT cp.is_success, cp.total_record, u.nick_name, u.`name`,
               cd.cd_name, cd.cd_type, cd.cd_goal ,cd.cd_unit
        FROM challenge_progress cp
        INNER JOIN `user` u ON u.user_id = cp.user_id
        INNER JOIN challenge_definition cd ON cd.cd_id = cp.cd_id
        WHERE cp.cd_id = #{id}
        AND cp.start_date &lt;= #{date}
        AND cp.end_date &gt;= #{date}
        ORDER BY cp.total_record DESC
    </select>

    <select id="groupByAge">
        SELECT CASE
            WHEN TIMESTAMPDIFF(YEAR, STR_TO_DATE(REPLACE(birth_date, '-', ''), '%Y%m%d'), CURDATE())
            BETWEEN 10 AND 19 THEN '10대'
            WHEN TIMESTAMPDIFF(YEAR, STR_TO_DATE(REPLACE(birth_date, '-', ''), '%Y%m%d'), CURDATE())
            BETWEEN 20 AND 29 THEN '20대'
            WHEN TIMESTAMPDIFF(YEAR, STR_TO_DATE(REPLACE(birth_date, '-', ''), '%Y%m%d'), CURDATE())
            BETWEEN 30 AND 39 THEN '30대'
            WHEN TIMESTAMPDIFF(YEAR, STR_TO_DATE(REPLACE(birth_date, '-', ''), '%Y%m%d'), CURDATE())
            BETWEEN 40 AND 49 THEN '40대'
            WHEN TIMESTAMPDIFF(YEAR, STR_TO_DATE(REPLACE(birth_date, '-', ''), '%Y%m%d'), CURDATE())
            BETWEEN 50 AND 59 THEN '50대'
            ELSE '기타'
            END AS ageGroup,
            COUNT(*) AS count
        FROM user
        GROUP BY ageGroup
    </select>

    <select id="countBySignIn">
        WITH RECURSIVE month_seq AS (
            SELECT DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 6 MONTH), '%Y-%m-01') AS month_start
            UNION ALL
            SELECT DATE_ADD(month_start, INTERVAL 1 MONTH)
            FROM month_seq
            WHERE month_start &lt; DATE_FORMAT(CURDATE(), '%Y-%m-01')
        )
        SELECT DATE_FORMAT(m.month_start, '%Y-%m') AS `month`,
        COALESCE(COUNT(u.user_id), 0) AS signInCount
        FROM month_seq m
        LEFT JOIN user u
        ON DATE_FORMAT(u.created_at, '%Y-%m') = DATE_FORMAT(m.month_start, '%Y-%m')
        GROUP BY m.month_start
        ORDER BY m.month_start
    </select>

    <select id="countByTier">
        SELECT CASE ur.challenge_code
            WHEN '01' THEN '브론즈'
            WHEN '02' THEN '실버'
            WHEN '03' THEN '골드'
            WHEN '04' THEN '다이아'
            ELSE '기타'
            END AS tier,
            COUNT(DISTINCT ur.user_id) AS count
        FROM user_role ur
        JOIN user u ON ur.user_id = u.user_id
        GROUP BY tier
        ORDER BY FIELD(tier, '브론즈', '실버', '골드', '다이아', '기타')
    </select>

    <select id="countByChallengeType">
        SELECT CASE cd.cd_type
            WHEN 'competition' THEN '월간 경쟁'
            WHEN 'personal' THEN '월간 개인'
            WHEN 'weekly' THEN '주간 경쟁'
            ELSE '기타'
            END AS challengeType,
            COUNT(cp.cp_id) AS totalCount,
            SUM(CASE WHEN cp.is_success = 1 THEN 1 ELSE 0 END) AS successCount,
            ROUND(SUM(CASE WHEN cp.is_success = 1 THEN 1 ELSE 0 END) / COUNT(cp.cp_id) * 100, 1) AS successRate
        FROM challenge_progress cp
        JOIN challenge_definition cd
        ON cp.cd_id = cd.cd_id
        GROUP BY cd.cd_type
        ORDER BY cd.cd_type
    </select>

    <select id="countByChallengeTypeRatio">
        SELECT CASE cd_type
            WHEN 'competition' THEN '월간 경쟁'
            WHEN 'personal' THEN '월간 개인'
            WHEN 'weekly' THEN '주간 경쟁'
            ELSE '기타'
            END AS type,
            COUNT(cd_type) AS count
        FROM challenge_definition
        WHERE cd_type != 'daily'
        GROUP BY cd_type;
    </select>
    
    <select id="countByChallengeParticipation">
        WITH RECURSIVE month_seq AS (
            SELECT DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 6 MONTH), '%Y-%m-01') AS month_start
            UNION ALL
            SELECT DATE_ADD(month_start, INTERVAL 1 MONTH)
            FROM month_seq
            WHERE month_start &lt; DATE_FORMAT(CURDATE(), '%Y-%m-01')
        )
        SELECT DATE_FORMAT(m.month_start, '%Y-%m') AS month,
            COUNT(DISTINCT u.user_id) AS totalUserCount,
            COUNT(DISTINCT c.user_id) AS participatedUserCount,
            ROUND(COUNT(DISTINCT c.user_id) / COUNT(DISTINCT u.user_id) * 100, 1) AS participationRate
        FROM month_seq m
        CROSS JOIN user u
        LEFT JOIN challenge_progress c
        ON c.start_date BETWEEN m.month_start AND LAST_DAY(m.month_start)
        GROUP BY m.month_start
        ORDER BY m.month_start

    </select>

    <select id="countByInquiry">
        WITH RECURSIVE month_seq AS (
            SELECT DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 6 MONTH), '%Y-%m-01') AS month_start
            UNION ALL
            SELECT DATE_ADD(month_start, INTERVAL 1 MONTH)
            FROM month_seq
            WHERE month_start &lt; DATE_FORMAT(CURDATE(), '%Y-%m-01')
        )
        SELECT DATE_FORMAT(m.month_start, '%Y-%m') AS `month`,
            COALESCE(COUNT(i.user_id), 0) AS inquiryCount
        FROM month_seq m
        LEFT JOIN inquiry i
        ON DATE_FORMAT(i.created_at, '%Y-%m') = DATE_FORMAT(m.month_start, '%Y-%m')
        GROUP BY m.month_start
        ORDER BY m.month_start
    </select>

    <select id="findTop5ByParticipationRate">
        SELECT cd.cd_id, cd.cd_name, cd.cd_type, cd.cd_goal, cd.cd_unit, cd.cd_reward
        FROM challenge_definition cd
        JOIN challenge_progress cp ON cd.cd_id = cp.cd_id
        GROUP BY cd.cd_id
        ORDER BY COUNT(cp.user_id) DESC
        LIMIT 5
    </select>

    <select id="findTop3ByFailRate">
        SELECT cd.cd_id, cd.cd_name, cd.cd_type, cd.cd_goal, cd.cd_unit, cd.cd_reward
        FROM challenge_definition cd
        JOIN challenge_progress cp ON cd.cd_id = cp.cd_id
        GROUP BY cd.cd_id
        ORDER BY SUM(CASE WHEN cp.is_success = 0 THEN 1 ELSE 0 END) / COUNT(cp.cp_id) DESC
        LIMIT 3
    </select>

    <select id="findAverageSuccessRate">
        SELECT ROUND(SUM(CASE WHEN cp.is_success = 1 THEN 1 ELSE 0 END) / COUNT(cp.cp_id) * 100, 1)
        FROM challenge_progress cp;
    </select>

    <select id="findTop5ByPoint">
        SELECT user_id, uid, nick_name, email, point
        FROM user
        ORDER BY point DESC
        LIMIT 5
    </select>

    <select id="findRecent5Inquiry">
        SELECT sender_name,
            sender_email,
            subject,
            status AS statusCode,
            created_at
        FROM inquiry
        ORDER BY created_at DESC
        LIMIT 5
    </select>

    <select id="getAvgInquiryRepliedTime">
        SELECT AVG(TIMESTAMPDIFF(HOUR, created_at, reply_at))
        FROM inquiry
        WHERE reply_at IS NOT NULL
    </select>

    <select id="getInquiryRepliedRate">
        SELECT
        ROUND(
        (SUM(CASE WHEN reply_at IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100,
        1
        )
        FROM inquiry
    </select>
</mapper>